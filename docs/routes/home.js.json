[
    {
        "tags": [],
        "description": {
            "full": "<p>Copyright 2014, Digium, Inc.\nAll rights reserved.</p>\n<p>This source code is licensed under The AGPL v3 License found in the\nLICENSE file in the root directory of this source tree.</p>\n<p>For all details and documentation:  <a href=\"https://www.respoke.io\">https://www.respoke.io</a></p>\n",
            "summary": "<p>Copyright 2014, Digium, Inc.\nAll rights reserved.</p>\n",
            "body": "<p>This source code is licensed under The AGPL v3 License found in the\nLICENSE file in the root directory of this source tree.</p>\n<p>For all details and documentation:  <a href=\"https://www.respoke.io\">https://www.respoke.io</a></p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": true,
        "code": "var express = require('express');\nvar router = express.Router();\nvar config = require('../config');\nvar middleware = require('../lib/middleware');\n\nrouter.get('/', function (req, res) {\n    req.log.info('saying something here');\n    res.render('index', { title: config.name });\n});\n\nrouter.get('/private', middleware.isAuthorized, function (req, res) {\n    res.render('call', {\n        title: 'Video call'\n    });\n});\n\nrouter.get('/files/:id', middleware.isAuthorized, function (req, res, next) {\n    req.db.File.findById(req.params.id, function (err, file) {\n        if (err) {\n            return next(err);\n        }\n        if (!file) {\n            return res.status(404).send({ error: 'Not found'});\n        }\n        res.set('Content-Type', file.contentType);\n        res.send(new Buffer(file.content, 'base64'));\n    });\n});\n\nrouter.get('/conf/:_id/:conf', function (req, res, next) {\n    req.db.Account\n    .findOne({ _id: req.params._id, conf: req.params.conf })\n    .exec(function (err, account) {\n        var genericMessage = new Error(\"Invalid ID or confirmation code. It may have already been used.\");\n        genericMessage.status = 404;\n        if (err) {\n            req.log.error('confirmation error', err);\n            return next(genericMessage);\n        }\n        if (!account) {\n            return next(genericMessage);\n        }\n        account.conf = null;\n        account.save(function (err, saved) {\n            if (err) {\n                return next(err);\n            }\n\n            res.render('conf', {\n                title: 'Email confirmed',\n                message: 'Welcome!'\n            });\n\n            req.respoke.groups.publish({\n                groupId: config.systemGroupId,\n                message: JSON.stringify({\n                    meta: {\n                        type: 'newaccount',\n                        value: account._id\n                    }\n                })\n            }, function (err) {\n                if (err) {\n                    req.log.error('failed to send new account notification', err);\n                }\n            });\n\n        });\n    });\n});\n\nrouter.get('/password-reset/:_id/:conf', function(req, res, next) {\n    req.db.Account\n    .findOne({ _id: req.params._id, conf: req.params.conf })\n    .select('+conf')\n    .exec(function (err, account) {\n        var genericMessage = new Error(\"Invalid ID or reset code.\");\n        genericMessage.status = 404;\n        if (err) {\n            req.log.error('password reset error', err);\n            return next(genericMessage);\n        }\n        if (!account) {\n            return next(genericMessage);\n        }\n        res.render('reset', {\n            title: 'Password reset',\n            message: 'Reset your password',\n            conf: account.conf,\n            _id: account._id\n        });\n    });\n});\n\nmodule.exports = router;",
        "ctx": {
            "type": "declaration",
            "name": "express",
            "value": "require('express')",
            "string": "express",
            "file": {
                "input": "routes/home.js",
                "output": "docs/routes/home.js.json"
            }
        }
    }
]