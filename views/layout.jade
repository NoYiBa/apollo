doctype html
html
  head
    title= title
    link
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css')
    link(rel='stylesheet', href='/css/style.css')
    link#favicon(rel="shortcut icon" href="/favicon.ico")
    script.
        // node webkit stuff.
        if (window.nwDispatcher) {

            var GUI = window.nwDispatcher.requireNwGui();
            var WIN = GUI.Window.get();
            GUI.TRAY = null;

            WIN.removeAllListeners('new-win-policy');
            WIN.on('new-win-policy', function (frame, url, policy) {
                console.log(frame, url, policy, this);
                if (url.indexOf('/private') !== -1) {
                    policy.forceNewPopup(); // video calls in a popup
                    return;
                } else if (url.indexOf('#{config.baseURL}' + '/files') !== -1) {
                    policy.forceNewWindow(); // so you can see the link
                    return;
                }
                GUI.Shell.openExternal(url);
                policy.ignore();
            });
            
            WIN.removeAllListeners('close');
            WIN.on('close', function (e) {
                if (e) {
                    WIN.close(true);
                    return;
                }
                
                if (!GUI.TRAY) {
                    GUI.TRAY = new GUI.Tray({ title: '#{config.name}' });

                    // Give it a menu
                    var menu = new GUI.Menu();
                    menu.append(new GUI.MenuItem({
                        label: 'Show ' + '#{config.name}',
                        click: function () {
                            WIN.show();
                            // Remove the tray
                            GUI.TRAY.remove();
                            GUI.TRAY = null;

                            var quitEntry = nativeMenuBar.items[0].submenu.items[nativeMenuBar.items[0].submenu.items.length -1];
                            quitEntry.enabled = true;

                        }
                    }));
                    menu.append(new GUI.MenuItem({
                        label: 'Quit ' + '#{config.name}',
                        click: function () {
                            GUI.App.quit();
                        }
                    }));
                    GUI.TRAY.menu = menu;
                    
                    var quitEntry = nativeMenuBar.items[0].submenu.items[nativeMenuBar.items[0].submenu.items.length -1];
                    quitEntry.enabled = false;

                }
                
                WIN.hide();
                // Load native UI library
            });

            var nativeMenuBar = new GUI.Menu({ type: "menubar" });
            try {
                nativeMenuBar.createMacBuiltin("");
            }
            catch (notOSX) { }
            
            // Main osx menu
            function toggleDevTools () {
                if (WIN.isDevToolsOpen()) {
                    WIN.closeDevTools();
                } else {
                    WIN.showDevTools();
                }
            }
            nativeMenuBar.items[0].submenu.insert(new GUI.MenuItem({
                modifiers: 'cmd-alt',
                key: 'i',
                label: 'Toggle Developer Tools',
                click: toggleDevTools
            }));
            
            // Window menu
            nativeMenuBar.items[1].submenu.insert(new GUI.MenuItem({
                type: 'separator'
            }));
            nativeMenuBar.items[1].submenu.insert(new GUI.MenuItem({
                modifiers: 'cmd-shift',
                key: 'c',
                label: 'Copy Window URL',
                click: function () {
                    GUI.Clipboard.get().set(WIN.window.location.toString(), 'text');
                }
            }));
            nativeMenuBar.items[1].submenu.insert(new GUI.MenuItem({
                modifiers: 'cmd',
                key: 'r',
                label: 'Refresh',
                click: function () {
                    GUI.Window.get().window.location.reload();
                }
            }));
            WIN.menu = nativeMenuBar;
        }
    script(src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-rc.3/angular.min.js")
    script(src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-rc.3/angular-route.min.js")
    script(src=config.respokeJS)
    script(src="/js/apollo.js")

  body

    //- Background animation container
    #container: canvas#pixie

    //- Apollo angular app
    #apollo(ng-app="apollo" ng-controller="GlobalController")

        //- Notification Area
        .notifications(ng-cloak)
            .alert.alert-info(
                ng-repeat="notif in notifications track by $index"
                ng-class="{{ notif.class || '' }}"
            )
                button.close(data-dismiss="alert" ng-click="notifications.splice($index, 1)")
                    i.fa.fa-remove
                | {{ notif.message || notif.error || notif }}

        //- Main view area
        block content

    br
    br
    br


    script(src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js")
    script(src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js")
    script(src="/js/lib/pixie.js")
